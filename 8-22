//int main()
//{
//	char a = 0;
//	int *pc = &a;
//	if (*pc == 1)
//	{
//		printf("大端\n");
//	}
//	else
//	{
//		printf("小端\n");
//	}
//
//	system("pause");
//	return 0;
//}
//
//
//int main()
//{
//	int a = 20;
//	int b = -10;
//	system("pause");
//	return 0;
//}
//1.编写函数：
//unsigned int reverse_bit(unsigned int value);
//这个函数的返回值value的二进制位模式从左到右翻转后的值。
//
//如：
//在32位机器上25这个值包含下列各位：
//00000000000000000000000000011001
//翻转后：（2550136832）
//10011000000000000000000000000000
//程序结果返回：
//2550136832
//#include <stdlib.h>
//#pragma warning (disable:4996)
//unsigned int reverse_bit(unsigned int x)
//{
//	unsigned int a = 0;
//	int b = 0;
//	for (int i = 0; i < 32; i++)
// {
//
//		a = x & 1;//取出最后一位数
//		x = x >> 1;//把值右移一位
//		b = b + (a << (31 - i));//把每次末尾取出来的值都放在变量里，其实整体相当于把二进制数转置了一下
//	}
//	return b;
//}
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	printf("%u", reverse_bit(a));
//	system("pause");
//	return 0;
//}

//2.不使用（a + b） / 2这种方式，求两个数的平均值。
//int  average(int x, int y)
//{
//	
//	if (x == y)
//	{
//		return x | y;
//	}
//	else if (x > y)
//	{
//		int tmp = 0;
//		 tmp = (x - y)/2;
//		return tmp + y;
//	}
//	else if (x < y)
//	{
//		int tmp = 0;
//		tmp = (y - x)/2;
//		return tmp + x;
//	}
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	printf("请输入两个数:>");
//	scanf("%d%d", &a, &b);
//	int ret=average(a,b);
//	printf("%d", ret);
//	system("pause");
//	return 0;
//}
//
//3.编程实现：
//一组数据中只有一个数字出现了一次。其他所有数字都是成对出现的。
//请找出这个数字。（使用位运算）
//
//int main()
//{
//	int arr[7] = { 1, 2, 3, 1, 2, 3, 4 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);//sz==7
//	int ret = 0;
//	for (i = 0; i < sz; i++)
//	{
//		ret = ret ^ arr[i];
//	}
//	printf("出现一次的数是：%d\n", ret);
//	system("pause");
//	return 0;
//}
//4.
//有一个字符数组的内容为:"student a am i",
//			请你将数组的内容改为"i am a student".
//			要求：
//			不能使用库函数。
//			只能开辟有限个空间（空间个数和字符串的长度无关）。
//#include <assert.h>
//int my_strlen(const char *str)//求字符串长度函数
//{
//	int count = 0;
//	assert(str);
//	while (*str != '\0')
//	{
//
//		count++;
//		str++;
//	}
//	return count;
//
//
//}
//void reverse(char a[], int left, int right)//逆序函数
//{
//	while (left<right)
//	{
//		char tmp = a[left];
//		a[left] = a[right];
//		a[right] = tmp;
//		left++;
//		right--;
//	}
//
//}
//char* reverse_string(char a[])//逆序字符串
//{
//	int i = 0;
//	int left = 0;
//	int right = my_strlen(a) - 1;//逆序整个字符串
//	reverse(a, left, right);
//	//逆序逐个单词
//	while (a[i] != '\0')
//	{
//		left = i;
//		while ((a[i] != '\0') && (a[i] != ' '))
//		{
//			i++;
//
//		}
//		right = i - 1;
//		reverse(a, left, right);
//		if (a[i] != '\0')
//			i++;
//	}
//	return a;
//}
//
//int main()
//{
//	char a[] = "student a am i";
//	reverse_string(a);
//	printf("%s\n", a);
//	system("pause");
//	return 0;
//}
