#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX_COLS 20
#define MAX_INPUT 1000
int read_column_numbers(int columns[], int max);
void rearrange(char *output, char const *input, int n_columns, int const columns[]);
int main(void)
{
	int n_columns;//进行处理的标号
	int columns[MAX_COLS];//需要处理的列数
	char input[MAX_INPUT];//容纳输入行的数组
	char output[MAX_INPUT];//容纳输出行的数组
	n_columns = read_column_numbers(columns, MAX_COLS);
	while (gets(input) != NULL)
	{
		printf("Original input :%s\n", input);
		rearrange(output, input, n_columns, columns);
		printf("Rearranged line:%s\n", output);

	}
	return EXIT_SUCCESS;
}
int read_column_numbers(int columns[], int max)
{
	int num = 0;
	int ch;
	while (num < max&&scanf("%d", &columns[num]) == 1 && columns[num] >= 0)
		num += 1;
	//确认已经读取的标号为偶数，因为他们是以 对的形式出现的
	if (num % 2 != 0)
	{
		puts("Last column number is not paired.");
		exit(EXIT_FAILURE);
	}
	while ((ch = getchar()) != EOF&&ch != '\n');
	return num;
}
//处理输入行，将指定的字符连接在一起，输出行以nul结尾
void rearrange(char *output, char const *input, int n_columns, int const columns[])
{
	int col;
	int output_col;
	int len;
	len = strlen(input);
	output_col = 0;
	//处理每队列标号
	for (col = 0; col < n_columns; col += 2)
	{
		int nchars = columns[col + 1] - columns[col] + 1;
		//如果输入行结束或输出行组数已满，就结束任务
		if (columns[col]>len || output_col == MAX_INPUT - 1)
			break;
		//如果输出行数据空间不够，只复制可以容纳的数据
		if (output_col + nchars > MAX_INPUT - 1)
			nchars = MAX_INPUT - output_col - 1;
		//复制相关数据
		strncpy(output + output_col, input + columns[col], nchars);
		output_col += nchars;
	}
	output[output_col] = '\0';
	system("pause");
	return 0;
}
