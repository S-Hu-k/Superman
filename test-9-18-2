#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//1.写一个函数返回参数二进制中 1 的个数
//比如： 15 0000 1111 4 个 1
//程序原型：
//int count_one_bits(unsigned int value)
//{
//	// 返回 1的位数 
//}
//int count_one_bits( int n)
//{
//	int count = 0;
//	while (n)
//	{
//		if (n % 2 == 1)
//		{
//			count++;
//		}
//		n /= 2;
//	}
//	return count;
//}

//
//int count_one_bits(unsigned int n)
//{
//	int count = 0;
//		while (n)
//		{
//			if (n % 2 == 1)
//			{
//				count++;
//			}
//			n /= 2;
//		}
//		return count;
//}
////
//int count_one_bits(int n)
//{
//	int count = 0;
//	while (n)
//	{
//		n=n&(n-1);
//		count++;
//	}
//	return count;
//}
//int count_one_bits(int n)
//{
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (((n >> i) & 1) == 1)
//			count++;
//	}
//	return count;
//}
//int main()
//{
//	int num = -1;
//	int ret = 0;
//	ret = count_one_bits(num);
//	printf("ret=%d", ret);
//	system("pause");
//	return 0;
//}
////
//2.获取一个数二进制序列中所有的偶数位和奇数位，
//分别输出二进制序列。
//int main()
//{
//	int m = 100;
//	int i = 0;
//	for (i = 31; i >= 1; i -= 2)
//	{
//		printf("%d", (m>>i)&1);
//	}
//	printf("\n");
//	for (i = 30; i >= 0; i -= 2)
//	{
//		printf("%d", (m >> i) & 1);
//	}
//	printf("\n");
//	system("pause");
//	return 0;
//}
//
//
//
//3. 输出一个整数的每一位。
//
//int main()
//{
//	int n = 0;
//	printf("亲输入要操作的数:>");
//	scanf("%d", &n);
//	while (n)
//	{
//		printf("%d ", n % 10);
//		n /= 10;
//	}
//
//	system("pause");
//	return 0;
//}
//4.编程实现：
//两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？
//输入例子 :
//1999 2299
//输出例子 : 7


//int main()
//{
//	int a = 1999;
//	int b = 2299;
//	/*int m = 10;
//	int n = 9;
//	int ret = 0;
//	ret = two_bit(m);
//	printf("%d", ret);*/
//	int m = a ^ b;
//	int num = 0;
//	while (m>0)
//	{
//		m &= (m - 1);
//		num++;
//	}
//	printf("%d", num);
//	system("pause");
//	return 0;
//}
